openapi: 3.0.0
info:
  title: My API
  description: API documentation for my app
  version: 1.0.0
security:
  - BearerAuth: []
paths:
  /api/v1/transactions:
    post:
      summary: Add a new transaction
      operationId: addTransaction
      responses:
        201:
          description: Transaction added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Transaction added successfully
    get:
      summary: Get a list of transactions
      operationId: getTransactions
      responses:
        200:
          description: A list of transactions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Transaction"

  /api/v1/transactions/update/{id}:
    post:
      summary: Update a transaction by ID
      operationId: updateTransactionById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        200:
          description: Transaction updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Transaction updated successfully

  /api/v1/transactions/delete/{id}:
    post:
      summary: Delete a transaction by ID
      operationId: deleteTransactionById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        200:
          description: Transaction deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Transaction deleted successfully

  /api/v1/transactions/report:
    get:
      summary: Generate a transaction report
      operationId: generateReport
      responses:
        200:
          description: Transaction report generated
          content:
            application/json:
              schema:
                type: object
                properties:
                  report:
                    type: string
                    example: Report data

  /api/v1/budget:
    post:
      summary: Set a budget
      operationId: setBudget
      responses:
        201:
          description: Budget set successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Budget set successfully
    get:
      summary: List all budgets
      operationId: listBudget
      responses:
        200:
          description: A list of budgets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Budget"

  /api/v1/budget/status:
    get:
      summary: Get budget status
      operationId: getBudgetStatus
      responses:
        200:
          description: Current budget status
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: Budget is on track

  /api/v1/transactions/summary:
    get:
      summary: Get transaction summary
      operationId: summaryData
      responses:
        200:
          description: Summary data
          content:
            application/json:
              schema:
                type: object
                properties:
                  summary:
                    type: string
                    example: Transaction summary data

  /api/v1/categories:
    get:
      summary: List all categories
      operationId: listCategories
      responses:
        200:
          description: A list of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Category"
    post:
      summary: Create a new category
      operationId: createCategory
      responses:
        201:
          description: Category created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Category created successfully

  /api/v1/categories/delete/{id}:
    post:
      summary: Delete a category by ID
      operationId: deleteCategoryById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        200:
          description: Category deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Category deleted successfully

  /api/v1/register:
    post:
      summary: Register a new user
      operationId: createUser
      security: []
      responses:
        201:
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User registered successfully

  /api/v1/login:
    post:
      summary: User login
      operationId: loginUser
      security: []
      responses:
        200:
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "JWT_Token"

  /api/v1/me:
    get:
      summary: Get current logged-in user's information
      operationId: loadUser
      responses:
        200:
          description: User information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

  /api/v1/logout:
    get:
      summary: Log out the current user
      operationId: logoutUser
      responses:
        200:
          description: User logged out successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User logged out successfully

  /api/v1/update:
    put:
      summary: Update user information
      operationId: updateUserInfo
      responses:
        200:
          description: User information updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User information updated successfully

  /api/v1/password/update:
    put:
      summary: Update user password
      operationId: updateUserPassword
      responses:
        200:
          description: Password updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Password updated successfully

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Transaction:
      type: object
      required:
        - name
        - user_id
        - type
        - amount
        - account
        - category
      properties:
        name:
          type: string
          description: The name of the transaction (e.g., "Lunch", "Salary")
        user_id:
          type: string
          format: objectId
          description: The unique identifier for the user associated with the transaction
        type:
          type: string
          enum:
            - expense
            - money in
          description: The type of transaction (either "expense" or "money in")
        budget_id:
          type: string
          format: objectId
          description: Optional reference to the associated budget
        amount:
          type: number
          format: float
          description: The amount of money involved in the transaction
        account:
          type: string
          enum:
            - bank
            - mobile money
          description: The type of account for the transaction
        category:
          type: string
          format: objectId
          description: The category associated with the transaction
        subcategory:
          type: string
          format: objectId
          description: Optional subcategory reference
        date:
          type: string
          format: date-time
          description: The date when the transaction was created, defaults to the current date
    Budget:
      type: object
      required:
        - name
        - user_id
        - limit
      properties:
        name:
          type: string
          description: The name of the budget (e.g., "Monthly Budget", "Vacation Fund")
        user_id:
          type: string
          format: objectId
          description: The unique identifier of the user associated with the budget
        limit:
          type: number
          format: float
          description: The spending limit for the budget
        totalSpent:
          type: number
          format: float
          description: The amount spent so far from the budget, default is 0
    Category:
      type: object
      required:
        - name
        - user_id
      properties:
        name:
          type: string
          description: The name of the category (e.g., "Groceries", "Entertainment")
        user_id:
          type: string
          format: objectId
          description: The unique identifier of the user who owns the category
        parentId:
          type: string
          format: objectId
          description: The optional parent category to form a hierarchical structure (null if no parent)
    User:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
          description: The name of the user
        email:
          type: string
          description: The email of the user
        password:
          type: string
          description: The user's password (hashed before saving)
        phoneNumber:
          type: integer
          description: The phone number of the user (optional)
        createdAt:
          type: string
          format: date-time
          description: The time when the user was created
        resetPasswordToken:
          type: string
          description: Token for password reset (optional)
        resetPasswordTime:
          type: string
          format: date-time
          description: Time when the reset password token was generated (optional)
